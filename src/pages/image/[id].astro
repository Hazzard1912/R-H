---
import "glightbox/dist/css/glightbox.min.css";
import Image from "astro/components/Image.astro";
import Layout from "../../layouts/Layout.astro";
import type { ImageData } from "../../interfaces/imageData.response";
import type { ImageListResponse } from "../../interfaces/image.response";
import Gallery from "../../components/Gallery.astro";

export const prerender = false;

const { id } = Astro.params;

// API configuration
const API_BASE_URL = "https://rule34.xxx/index.php";

// Function to fetch image details
const getImageDetails = async (id: string) => {
    const params = new URLSearchParams({
        page: "dapi",
        s: "post",
        q: "index",
        id: id,
        json: "1",
    });

    try {
        const response = await fetch(`${API_BASE_URL}?${params}`, {
            headers: {
                Accept: "application/json",
            },
            cache: "no-store",
            priority: "high",
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log(data);
        return Array.isArray(data) && data.length > 0
            ? (data[0] as ImageData)
            : null;
    } catch (error) {
        console.error("Failed to fetch image details:", error);
        return null;
    }
};

// Function to fetch related images
const getRelatedImages = async (tag: string) => {
    const params = new URLSearchParams({
        page: "dapi",
        s: "post",
        q: "index",
        tags: tag,
        limit: "50",
        json: "1",
    });

    try {
        const response = await fetch(`${API_BASE_URL}?${params}`, {
            headers: {
                Accept: "application/json",
            },
            cache: "no-store",
            priority: "low",
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        return Array.isArray(data) ? (data as ImageListResponse[]) : [];
    } catch (error) {
        console.error("Failed to fetch related images:", error);
        return [];
    }
};

// Fetch main image
const image = await getImageDetails(id as string);

// Fetch related images
let relatedImages: ImageListResponse[] = [];
if (image?.tags) {
    const tags = image.tags.split(" ");
    if (tags.length > 0) {
        const randomTag = tags[Math.floor(Math.random() * tags.length)];
        try {
            relatedImages = await getRelatedImages(randomTag);
        } catch (error) {
            console.error("Error fetching related images:", error);
        }
    }
}

const tags = image?.tags ? image.tags.split(" ") : [];
---

{
    image ? (
        <Layout title="Imagen" id={id} image={image} meta={image?.tags}>
            <div class="container mx-auto mt-8 p-4">
                <div class="w-full max-w-4xl mx-auto p-6 rounded-xl bg-gray-900/60 backdrop-blur-sm border border-gray-800 shadow-2xl">
                    <div class="text-center mb-8">
                        <h1 class="text-3xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-purple-600">
                            Autor:{" "}
                            <span class="text-red-400">{image.owner}</span>
                        </h1>
                        <a
                            href={image.file_url}
                            target="_blank"
                            rel="noopener noreferrer"
                            class="inline-block mt-4 px-6 py-2 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white rounded-full transform hover:scale-105 transition-all duration-300 shadow-lg will-change-transform"
                        >
                            Ver fuente original
                        </a>
                    </div>

                    <div class="relative">
                        <div class="image-wrapper relative backdrop-blur-sm bg-gray-800/30 rounded-xl overflow-hidden border border-gray-700/50 transition-transform duration-300 hover:scale-[1.01]">
                            <div class="animate-pulse bg-gray-700/50 absolute inset-0" />
                            <Image
                                id="main-image"
                                src={image.file_url}
                                alt={`Imagen de: ${image.tags}`}
                                fetchpriority="high"
                                format="webp"
                                loading="eager"
                                quality={100}
                                class="lightbox opacity-0 transition-opacity duration-300 rounded-xl shadow-2xl cursor-pointer will-change-transform mx-auto"
                                layout="responsive"
                                width={image.width}
                                height={image.height}
                                sizes="(max-width: 768px) 100vw, (max-width: 1024px) 80vw, 60vw"
                                onload="this.classList.remove('opacity-0')"
                            />
                        </div>
                        <div class="flex justify-center gap-4 mt-4">
                            <button
                                id="shareButton"
                                class="flex items-center gap-2 px-6 py-2 bg-gradient-to-r from-blue-500 to-purple-600 hover:from-blue-600 hover:to-purple-700 text-white rounded-full transform hover:scale-105 transition-all duration-300 shadow-lg will-change-transform"
                            >
                                <svg
                                    xmlns="http://www.w3.org/2000/svg"
                                    class="h-5 w-5"
                                    fill="none"
                                    viewBox="0 0 24 24"
                                    stroke="currentColor"
                                >
                                    <path
                                        stroke-linecap="round"
                                        stroke-linejoin="round"
                                        stroke-width="2"
                                        d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"
                                    />
                                </svg>
                                Compartir
                            </button>
                        </div>
                    </div>
                    <div class="mt-12 p-6">
                        <h2 class="text-2xl font-extrabold text-center mb-6 text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-purple-600">
                            Tags
                        </h2>
                        <div class="flex flex-wrap gap-3 justify-center">
                            {tags?.map((tag) => (
                                <a
                                    href={`/tags/${tag}/1`}
                                    class="bg-gray-800/80 text-gray-100 hover:bg-gradient-to-r hover:from-red-500 hover:to-purple-600 transition-all duration-300 font-medium py-2 px-4 rounded-lg text-sm transform hover:scale-105 will-change-transform"
                                >
                                    #{tag}
                                </a>
                            ))}
                        </div>
                    </div>
                </div>

                <div class="mt-16 p-6">
                    <h2 class="text-3xl font-extrabold text-center mb-8 text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-purple-600">
                        Imágenes Relacionadas
                    </h2>
                    {relatedImages ? (
                        <Gallery images={relatedImages} />
                    ) : (
                        <p class="text-gray-300 text-center py-8">
                            No se encontraron imágenes relacionadas.
                        </p>
                    )}
                </div>
            </div>
        </Layout>
    ) : (
        <Layout title="Imagen no encontrada" meta="No encontrada">
            <div class="flex items-center justify-center min-h-[60vh]">
                <div class="w-full max-w-2xl mx-auto p-8 rounded-xl bg-gray-900/60 backdrop-blur-sm border border-gray-800 shadow-2xl">
                    <p class="text-3xl font-extrabold text-center mb-6 text-transparent bg-clip-text bg-gradient-to-r from-pink-500 to-purple-600">
                        No se encontró la imagen
                    </p>
                    <img
                        src="https://i.waifu.pics/k2r~YJ0.gif"
                        alt="No images found"
                        class="mx-auto mb-8 rounded-xl shadow-2xl border border-gray-800/50"
                        width="300"
                        height="200"
                    />
                    <div class="flex justify-center">
                        <a
                            href="/inicio/1"
                            class="bg-gradient-to-r from-red-500 to-pink-600 hover:from-red-600 hover:to-pink-700 text-white font-bold py-3 px-8 rounded-full transform hover:scale-105 transition-all duration-300 shadow-lg will-change-transform"
                        >
                            Volver al Inicio
                        </a>
                    </div>
                </div>
            </div>
        </Layout>
    )
}

<script>
    import Glightbox from "glightbox";
    document.addEventListener("DOMContentLoaded", () => {
        const lightbox = Glightbox({
            selector: ".lightbox",
            loop: false,
            touchNavigation: true,
            preload: true,
            closeButton: true,
        });
    });

    const shareButton = document.getElementById(
        "shareButton",
    ) as HTMLButtonElement;
    shareButton.addEventListener("click", () => {
        if (navigator.share) {
            const title =
                document
                    .querySelector('meta[property="og:title"]')
                    ?.getAttribute("content") || document.title;
            const text =
                document
                    .querySelector('meta[property="og:description"]')
                    ?.getAttribute("content") || "";

            const shareData: ShareData = {
                title,
                text,
                url: window.location.href,
            };

            navigator
                .share(shareData)
                .catch((err) => console.error("Error sharing:", err));
        } else {
            console.log("Web Share API not supported");
        }
    });
</script>
